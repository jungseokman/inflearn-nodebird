{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from \"next-redux-wrapper\";\nconst initialState = {\n  users: {},\n  post: {}\n};\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case HYDRATE:\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    case \"LOG_IN\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        users: _objectSpread(_objectSpread({}, state.users), {}, {\n          isLoggendId: true,\n          user: action.data\n        })\n      });\n\n    case \"LOG_OUT\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        users: _objectSpread(_objectSpread({}, state.users), {}, {\n          isLoggendId: false,\n          user: null\n        })\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["/Users/seokmanjung/Desktop/Inflearn/react-nodebird/prepare/front/reducers/index.js"],"names":["HYDRATE","initialState","users","post","rootReducer","state","action","type","payload","isLoggendId","user","data"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,IAAI,EAAE;AAFa,CAArB;;AAKA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AACpD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKP,OAAL;AACE,6CAAYK,KAAZ,GAAsBC,MAAM,CAACE,OAA7B;;AACF,SAAK,QAAL;AACE,6CACKH,KADL;AAEEH,QAAAA,KAAK,kCACAG,KAAK,CAACH,KADN;AAEHO,UAAAA,WAAW,EAAE,IAFV;AAGHC,UAAAA,IAAI,EAAEJ,MAAM,CAACK;AAHV;AAFP;;AAQF,SAAK,SAAL;AACE,6CACKN,KADL;AAEEH,QAAAA,KAAK,kCACAG,KAAK,CAACH,KADN;AAEHO,UAAAA,WAAW,EAAE,KAFV;AAGHC,UAAAA,IAAI,EAAE;AAHH;AAFP;;AAQF;AACE,aAAOL,KAAP;AAtBJ;AAwBD,CAzBD;;AA2BA,eAAeD,WAAf","sourcesContent":["import { HYDRATE } from \"next-redux-wrapper\";\n\nconst initialState = {\n  users: {},\n  post: {},\n};\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case HYDRATE:\n      return { ...state, ...action.payload };\n    case \"LOG_IN\":\n      return {\n        ...state,\n        users: {\n          ...state.users,\n          isLoggendId: true,\n          user: action.data,\n        },\n      };\n    case \"LOG_OUT\":\n      return {\n        ...state,\n        users: {\n          ...state.users,\n          isLoggendId: false,\n          user: null,\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}