{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport shortid from \"shortid\";\nimport produce from \"immer\";\nexport var initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: \"정석만\"\n    },\n    content: \"첫번째 게시글 #해시태그 #익스프레스\",\n    Images: [{\n      id: shortid.generate(),\n      src: \"https://dimg.donga.com/ugc/CDB/WOMAN/Article/5b/8f/65/69/5b8f656903c9d2738de6.jpg\"\n    }, {\n      id: shortid.generate(),\n      src: \"https://cphoto.asiae.co.kr/listimglink/6/2020111713594015534_1605589180.png\"\n    }, {\n      id: shortid.generate(),\n      src: \"http://www.news33.net/news/photo/202112/79972_42841_3543.jpg\"\n    }],\n    Comments: [{\n      id: shortid.generate(),\n      User: {\n        id: shortid.generate(),\n        nickname: \"석만\"\n      },\n      content: \"우와 개정판이 나왔군요~\"\n    }, {\n      id: shortid.generate(),\n      User: {\n        id: shortid.generate(),\n        nickname: \"명재\"\n      },\n      content: \"얼른 사고싶어요~\"\n    }]\n  }],\n  imagePaths: [],\n  //\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  //\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  //\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport var ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport var ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport var ADD_POST_FAILURE = \"ADD_POST_FAILURE\"; //\n\nexport var REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport var REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport var REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\"; //\n\nexport var ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport var ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport var ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\"; ////////////////////////////////////////////////////\n\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n}; //\n\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n}; /////////////////////////////////////////////////////\n\nvar dummyPost = function dummyPost(data) {\n  return {\n    id: data.id,\n    content: data.content,\n    User: {\n      id: 1,\n      nickname: \"정석만\"\n    },\n    Images: [],\n    Comments: []\n  };\n};\n\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: shortid.generate(),\n    content: data,\n    User: {\n      id: 1,\n      nickname: \"정석만\"\n    }\n  };\n}; // 리듀서 : 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수 (불변성은 지키면서)\n\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      //\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data;\n        });\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      //\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          var postIndex = state.mainPosts.findIndex(function (v) {\n            return v.id === action.data.postId;\n          });\n\n          var post = _objectSpread({}, state.mainPosts[postIndex]);\n\n          post.Comments = [dummyComment(action.data.content)].concat(_toConsumableArray(post.Comments));\n\n          var mainPosts = _toConsumableArray(state.mainPosts);\n\n          mainPosts[postIndex] = post;\n          return _objectSpread(_objectSpread({}, state), {}, {\n            mainPosts: mainPosts,\n            addCommentLoading: false,\n            addCommentDone: true\n          });\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        return state;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/seokmanjung/Desktop/Inflearn/react-nodebird/prepare/front/reducers/post.js"],"names":["shortid","produce","initialState","mainPosts","id","User","nickname","content","Images","generate","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","unshift","error","filter","v","postIndex","findIndex","postId","post"],"mappings":"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","sourcesContent":["import shortid from \"shortid\";\nimport produce from \"immer\";\n\nexport const initialState = {\n  mainPosts: [\n    {\n      id: 1,\n      User: {\n        id: 1,\n        nickname: \"정석만\",\n      },\n      content: \"첫번째 게시글 #해시태그 #익스프레스\",\n      Images: [\n        {\n          id: shortid.generate(),\n          src: `https://dimg.donga.com/ugc/CDB/WOMAN/Article/5b/8f/65/69/5b8f656903c9d2738de6.jpg`,\n        },\n        {\n          id: shortid.generate(),\n          src: `https://cphoto.asiae.co.kr/listimglink/6/2020111713594015534_1605589180.png`,\n        },\n        {\n          id: shortid.generate(),\n          src: `http://www.news33.net/news/photo/202112/79972_42841_3543.jpg`,\n        },\n      ],\n      Comments: [\n        {\n          id: shortid.generate(),\n          User: {\n            id: shortid.generate(),\n            nickname: \"석만\",\n          },\n          content: \"우와 개정판이 나왔군요~\",\n        },\n        {\n          id: shortid.generate(),\n          User: {\n            id: shortid.generate(),\n            nickname: \"명재\",\n          },\n          content: \"얼른 사고싶어요~\",\n        },\n      ],\n    },\n  ],\n  imagePaths: [],\n  //\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  //\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  //\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n};\n\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\n//\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\n//\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\n\n////////////////////////////////////////////////////\n\nexport const addPost = (data) => ({\n  type: ADD_POST_REQUEST,\n  data,\n});\n//\nexport const addComment = (data) => ({\n  type: ADD_COMMENT_REQUEST,\n  data,\n});\n\n/////////////////////////////////////////////////////\n\nconst dummyPost = (data) => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: \"정석만\",\n  },\n  Images: [],\n  Comments: [],\n});\n\nconst dummyComment = (data) => ({\n  id: shortid.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"정석만\",\n  },\n});\n\n// 리듀서 : 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수 (불변성은 지키면서)\nconst reducer = (state = initialState, action) => {\n  return produce(state, (draft) => {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      //\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      //\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS: {\n        const postIndex = state.mainPosts.findIndex(\n          (v) => v.id === action.data.postId\n        );\n        const post = { ...state.mainPosts[postIndex] };\n        post.Comments = [dummyComment(action.data.content), ...post.Comments];\n        const mainPosts = [...state.mainPosts];\n        mainPosts[postIndex] = post;\n        return {\n          ...state,\n          mainPosts,\n          addCommentLoading: false,\n          addCommentDone: true,\n        };\n      }\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        return state;\n    }\n  });\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}