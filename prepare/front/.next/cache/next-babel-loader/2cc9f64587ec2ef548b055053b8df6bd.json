{"ast":null,"code":"import shortid from \"shortid\";\nimport produce from \"immer\";\nimport { faker } from \"@faker-js/faker\";\nexport var initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  //\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostError: null,\n  //\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  //\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  //\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport var generateDummyPost = function generateDummyPost(number) {\n  return Array(number).fill().map(function () {\n    return {\n      id: shortid.generate(),\n      User: {\n        id: shortid.generate(),\n        nickname: faker.name.findName()\n      },\n      content: faker.lorem.paragraph(),\n      Images: [{\n        src: faker.image.image()\n      }],\n      Comments: [{\n        User: {\n          id: shortid.generate(),\n          nickname: faker.name.findName()\n        },\n        content: faker.lorem.sentence()\n      }]\n    };\n  });\n};\ninitialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\nexport var LOAD_POST_REQUEST = \"LOAD_POST_REQUEST\";\nexport var LOAD_POST_SUCCESS = \"LOAD_POST_SUCCESS\";\nexport var LOAD_POST_FAILURE = \"LOAD_POST_FAILURE\"; //\n\nexport var ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport var ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport var ADD_POST_FAILURE = \"ADD_POST_FAILURE\"; //\n\nexport var REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport var REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport var REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\"; //\n\nexport var ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport var ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport var ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\"; ////////////////////////////////////////////////////\n\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n}; //\n\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n}; /////////////////////////////////////////////////////\n\nvar dummyPost = function dummyPost(data) {\n  return {\n    id: data.id,\n    content: data.content,\n    User: {\n      id: 1,\n      nickname: \"정석만\"\n    },\n    Images: [],\n    Comments: []\n  };\n};\n\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: shortid.generate(),\n    content: data,\n    User: {\n      id: 1,\n      nickname: \"정석만\"\n    }\n  };\n}; // 리듀서 : 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수 (불변성은 지키면서)\n\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case LOAD_POST_REQUEST:\n        draft.loadPostLoading = true;\n        draft.loadPostDone = false;\n        draft.loadPostError = null;\n        break;\n\n      case LOAD_POST_SUCCESS:\n        draft.loadPostLoading = false;\n        draft.loadPostDone = true;\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        break;\n\n      case LOAD_POST_FAILURE:\n        draft.loadPostLoading = false;\n        draft.loadPostError = action.error;\n        break;\n      //\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      //\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data;\n        });\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      //\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          /* const postIndex = state.mainPosts.findIndex(\n            (v) => v.id === action.data.postId\n          );\n          const post = { ...state.mainPosts[postIndex] };\n          post.Comments = [dummyComment(action.data.content), ...post.Comments];\n          const mainPosts = [...state.mainPosts];\n          mainPosts[postIndex] = post; */\n          var post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.postId;\n          });\n          post.Comments.unshift(dummyComment(action.data.content));\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break;\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/seokmanjung/Desktop/Inflearn/react-nodebird/prepare/front/reducers/post.js"],"names":["shortid","produce","faker","initialState","mainPosts","imagePaths","loadPostLoading","loadPostDone","loadPostError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","generateDummyPost","number","Array","fill","map","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","Comments","sentence","concat","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","error","unshift","filter","v","post","find","postId"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,OAAOC,OAAP,MAAoB,OAApB;AACA,SAASC,KAAT,QAAsB,iBAAtB;AAEA,OAAO,IAAMC,YAAY,GAAG;AAC1BC,EAAAA,SAAS,EAAE,EADe;AAE1BC,EAAAA,UAAU,EAAE,EAFc;AAG1B;AACAC,EAAAA,eAAe,EAAE,KAJS;AAK1BC,EAAAA,YAAY,EAAE,KALY;AAM1BC,EAAAA,aAAa,EAAE,IANW;AAO1B;AACAC,EAAAA,cAAc,EAAE,KARU;AAS1BC,EAAAA,WAAW,EAAE,KATa;AAU1BC,EAAAA,YAAY,EAAE,IAVY;AAW1B;AACAC,EAAAA,iBAAiB,EAAE,KAZO;AAa1BC,EAAAA,cAAc,EAAE,KAbU;AAc1BC,EAAAA,eAAe,EAAE,IAdS;AAe1B;AACAC,EAAAA,iBAAiB,EAAE,KAhBO;AAiB1BC,EAAAA,cAAc,EAAE,KAjBU;AAkB1BC,EAAAA,eAAe,EAAE;AAlBS,CAArB;AAqBP,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,MAAD;AAAA,SAC/BC,KAAK,CAACD,MAAD,CAAL,CACGE,IADH,GAEGC,GAFH,CAEO;AAAA,WAAO;AACVC,MAAAA,EAAE,EAAEvB,OAAO,CAACwB,QAAR,EADM;AAEVC,MAAAA,IAAI,EAAE;AACJF,QAAAA,EAAE,EAAEvB,OAAO,CAACwB,QAAR,EADA;AAEJE,QAAAA,QAAQ,EAAExB,KAAK,CAACyB,IAAN,CAAWC,QAAX;AAFN,OAFI;AAMVC,MAAAA,OAAO,EAAE3B,KAAK,CAAC4B,KAAN,CAAYC,SAAZ,EANC;AAOVC,MAAAA,MAAM,EAAE,CACN;AACEC,QAAAA,GAAG,EAAE/B,KAAK,CAACgC,KAAN,CAAYA,KAAZ;AADP,OADM,CAPE;AAYVC,MAAAA,QAAQ,EAAE,CACR;AACEV,QAAAA,IAAI,EAAE;AACJF,UAAAA,EAAE,EAAEvB,OAAO,CAACwB,QAAR,EADA;AAEJE,UAAAA,QAAQ,EAAExB,KAAK,CAACyB,IAAN,CAAWC,QAAX;AAFN,SADR;AAKEC,QAAAA,OAAO,EAAE3B,KAAK,CAAC4B,KAAN,CAAYM,QAAZ;AALX,OADQ;AAZA,KAAP;AAAA,GAFP,CAD+B;AAAA,CAA1B;AA0BPjC,YAAY,CAACC,SAAb,GAAyBD,YAAY,CAACC,SAAb,CAAuBiC,MAAvB,CAA8BnB,iBAAiB,CAAC,EAAD,CAA/C,CAAzB;AAEA,OAAO,IAAMoB,iBAAiB,GAAG,mBAA1B;AACP,OAAO,IAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,IAAMC,iBAAiB,GAAG,mBAA1B,C,CACP;;AACA,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB,C,CACP;;AACA,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B,C,CACP;;AACA,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B,C,CAEP;;AAEA,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,IAAD;AAAA,SAAW;AAChCC,IAAAA,IAAI,EAAEX,gBAD0B;AAEhCU,IAAAA,IAAI,EAAJA;AAFgC,GAAX;AAAA,CAAhB,C,CAIP;;AACA,OAAO,IAAME,UAAU,GAAG,SAAbA,UAAa,CAACF,IAAD;AAAA,SAAW;AACnCC,IAAAA,IAAI,EAAEL,mBAD6B;AAEnCI,IAAAA,IAAI,EAAJA;AAFmC,GAAX;AAAA,CAAnB,C,CAKP;;AAEA,IAAMG,SAAS,GAAG,SAAZA,SAAY,CAACH,IAAD;AAAA,SAAW;AAC3B5B,IAAAA,EAAE,EAAE4B,IAAI,CAAC5B,EADkB;AAE3BM,IAAAA,OAAO,EAAEsB,IAAI,CAACtB,OAFa;AAG3BJ,IAAAA,IAAI,EAAE;AACJF,MAAAA,EAAE,EAAE,CADA;AAEJG,MAAAA,QAAQ,EAAE;AAFN,KAHqB;AAO3BM,IAAAA,MAAM,EAAE,EAPmB;AAQ3BG,IAAAA,QAAQ,EAAE;AARiB,GAAX;AAAA,CAAlB;;AAWA,IAAMoB,YAAY,GAAG,SAAfA,YAAe,CAACJ,IAAD;AAAA,SAAW;AAC9B5B,IAAAA,EAAE,EAAEvB,OAAO,CAACwB,QAAR,EAD0B;AAE9BK,IAAAA,OAAO,EAAEsB,IAFqB;AAG9B1B,IAAAA,IAAI,EAAE;AACJF,MAAAA,EAAE,EAAE,CADA;AAEJG,MAAAA,QAAQ,EAAE;AAFN;AAHwB,GAAX;AAAA,CAArB,C,CASA;;;AACA,IAAM8B,OAAO,GAAG,SAAVA,OAAU,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBtD,YAAyB;AAAA,MAAXuD,MAAW;AAChD,SAAOzD,OAAO,CAACwD,KAAD,EAAQ,UAACE,KAAD,EAAW;AAC/B,YAAQD,MAAM,CAACN,IAAf;AACE,WAAKd,iBAAL;AACEqB,QAAAA,KAAK,CAACrD,eAAN,GAAwB,IAAxB;AACAqD,QAAAA,KAAK,CAACpD,YAAN,GAAqB,KAArB;AACAoD,QAAAA,KAAK,CAACnD,aAAN,GAAsB,IAAtB;AACA;;AACF,WAAK+B,iBAAL;AACEoB,QAAAA,KAAK,CAACrD,eAAN,GAAwB,KAAxB;AACAqD,QAAAA,KAAK,CAACpD,YAAN,GAAqB,IAArB;AACAoD,QAAAA,KAAK,CAACvD,SAAN,GAAkBsD,MAAM,CAACP,IAAP,CAAYd,MAAZ,CAAmBsB,KAAK,CAACvD,SAAzB,CAAlB;AACA;;AAEF,WAAKoC,iBAAL;AACEmB,QAAAA,KAAK,CAACrD,eAAN,GAAwB,KAAxB;AACAqD,QAAAA,KAAK,CAACnD,aAAN,GAAsBkD,MAAM,CAACE,KAA7B;AACA;AACF;;AACA,WAAKnB,gBAAL;AACEkB,QAAAA,KAAK,CAAClD,cAAN,GAAuB,IAAvB;AACAkD,QAAAA,KAAK,CAACjD,WAAN,GAAoB,KAApB;AACAiD,QAAAA,KAAK,CAAChD,YAAN,GAAqB,IAArB;AACA;;AACF,WAAK+B,gBAAL;AACEiB,QAAAA,KAAK,CAAClD,cAAN,GAAuB,KAAvB;AACAkD,QAAAA,KAAK,CAACjD,WAAN,GAAoB,IAApB;AACAiD,QAAAA,KAAK,CAACvD,SAAN,CAAgByD,OAAhB,CAAwBP,SAAS,CAACI,MAAM,CAACP,IAAR,CAAjC;AACA;;AAEF,WAAKR,gBAAL;AACEgB,QAAAA,KAAK,CAAClD,cAAN,GAAuB,KAAvB;AACAkD,QAAAA,KAAK,CAAChD,YAAN,GAAqB+C,MAAM,CAACE,KAA5B;AACA;AAEF;;AACA,WAAKhB,mBAAL;AACEe,QAAAA,KAAK,CAAC/C,iBAAN,GAA0B,IAA1B;AACA+C,QAAAA,KAAK,CAAC9C,cAAN,GAAuB,KAAvB;AACA8C,QAAAA,KAAK,CAAC7C,eAAN,GAAwB,IAAxB;AACA;;AACF,WAAK+B,mBAAL;AACEc,QAAAA,KAAK,CAACvD,SAAN,GAAkBuD,KAAK,CAACvD,SAAN,CAAgB0D,MAAhB,CAAuB,UAACC,CAAD;AAAA,iBAAOA,CAAC,CAACxC,EAAF,KAASmC,MAAM,CAACP,IAAvB;AAAA,SAAvB,CAAlB;AACAQ,QAAAA,KAAK,CAAC/C,iBAAN,GAA0B,KAA1B;AACA+C,QAAAA,KAAK,CAAC9C,cAAN,GAAuB,IAAvB;AACA;;AAEF,WAAKiC,mBAAL;AACEa,QAAAA,KAAK,CAAC/C,iBAAN,GAA0B,KAA1B;AACA+C,QAAAA,KAAK,CAAC7C,eAAN,GAAwB4C,MAAM,CAACE,KAA/B;AACA;AACF;;AACA,WAAKb,mBAAL;AACEY,QAAAA,KAAK,CAAC5C,iBAAN,GAA0B,IAA1B;AACA4C,QAAAA,KAAK,CAAC3C,cAAN,GAAuB,KAAvB;AACA2C,QAAAA,KAAK,CAAC1C,eAAN,GAAwB,IAAxB;AACA;;AAEF,WAAK+B,mBAAL;AAA0B;AACxB;AACR;AACA;AACA;AACA;AACA;AACA;AACQ,cAAMgB,IAAI,GAAGL,KAAK,CAACvD,SAAN,CAAgB6D,IAAhB,CAAqB,UAACF,CAAD;AAAA,mBAAOA,CAAC,CAACxC,EAAF,KAASmC,MAAM,CAACP,IAAP,CAAYe,MAA5B;AAAA,WAArB,CAAb;AACAF,UAAAA,IAAI,CAAC7B,QAAL,CAAc0B,OAAd,CAAsBN,YAAY,CAACG,MAAM,CAACP,IAAP,CAAYtB,OAAb,CAAlC;AACA8B,UAAAA,KAAK,CAAC5C,iBAAN,GAA0B,KAA1B;AACA4C,UAAAA,KAAK,CAAC3C,cAAN,GAAuB,IAAvB;AACA;AACD;;AACD,WAAKiC,mBAAL;AACEU,QAAAA,KAAK,CAAC5C,iBAAN,GAA0B,KAA1B;AACA4C,QAAAA,KAAK,CAAC1C,eAAN,GAAwByC,MAAM,CAACE,KAA/B;AACA;;AAEF;AACE;AA5EJ;AA8ED,GA/Ea,CAAd;AAgFD,CAjFD;;AAmFA,eAAeJ,OAAf","sourcesContent":["import shortid from \"shortid\";\nimport produce from \"immer\";\nimport { faker } from \"@faker-js/faker\";\n\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  //\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostError: null,\n  //\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  //\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  //\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n};\n\nexport const generateDummyPost = (number) =>\n  Array(number)\n    .fill()\n    .map(() => ({\n      id: shortid.generate(),\n      User: {\n        id: shortid.generate(),\n        nickname: faker.name.findName(),\n      },\n      content: faker.lorem.paragraph(),\n      Images: [\n        {\n          src: faker.image.image(),\n        },\n      ],\n      Comments: [\n        {\n          User: {\n            id: shortid.generate(),\n            nickname: faker.name.findName(),\n          },\n          content: faker.lorem.sentence(),\n        },\n      ],\n    }));\n\ninitialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\n\nexport const LOAD_POST_REQUEST = \"LOAD_POST_REQUEST\";\nexport const LOAD_POST_SUCCESS = \"LOAD_POST_SUCCESS\";\nexport const LOAD_POST_FAILURE = \"LOAD_POST_FAILURE\";\n//\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\n//\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\n//\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\n\n////////////////////////////////////////////////////\n\nexport const addPost = (data) => ({\n  type: ADD_POST_REQUEST,\n  data,\n});\n//\nexport const addComment = (data) => ({\n  type: ADD_COMMENT_REQUEST,\n  data,\n});\n\n/////////////////////////////////////////////////////\n\nconst dummyPost = (data) => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: \"정석만\",\n  },\n  Images: [],\n  Comments: [],\n});\n\nconst dummyComment = (data) => ({\n  id: shortid.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"정석만\",\n  },\n});\n\n// 리듀서 : 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수 (불변성은 지키면서)\nconst reducer = (state = initialState, action) => {\n  return produce(state, (draft) => {\n    switch (action.type) {\n      case LOAD_POST_REQUEST:\n        draft.loadPostLoading = true;\n        draft.loadPostDone = false;\n        draft.loadPostError = null;\n        break;\n      case LOAD_POST_SUCCESS:\n        draft.loadPostLoading = false;\n        draft.loadPostDone = true;\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        break;\n\n      case LOAD_POST_FAILURE:\n        draft.loadPostLoading = false;\n        draft.loadPostError = action.error;\n        break;\n      //\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      //\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      //\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS: {\n        /* const postIndex = state.mainPosts.findIndex(\n          (v) => v.id === action.data.postId\n        );\n        const post = { ...state.mainPosts[postIndex] };\n        post.Comments = [dummyComment(action.data.content), ...post.Comments];\n        const mainPosts = [...state.mainPosts];\n        mainPosts[postIndex] = post; */\n        const post = draft.mainPosts.find((v) => v.id === action.data.postId);\n        post.Comments.unshift(dummyComment(action.data.content));\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n      }\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}