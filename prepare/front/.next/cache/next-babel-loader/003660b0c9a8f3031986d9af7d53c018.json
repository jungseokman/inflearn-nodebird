{"ast":null,"code":"import { all, fork, call, put, takeLatest, delay } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, //\nADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, generateDummyPost, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, //\nREMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nimport shortid from \"shortid\";\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    //const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortid.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n} //\n\n\nfunction removePostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction* removePost(action) {\n  try {\n    //const result = yield call(removePostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n} //\n\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    //const result = yield call(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n} //\n\n\nfunction loadPostAPI(data) {\n  return axios.get(\"/api/posts\", data);\n}\n\nfunction* loadPost(action) {\n  try {\n    //const result = yield call(loadPostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n} ////////////////////////////////////\n\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemoveComment() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n} /////////////////////////////////\n\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchRemoveComment), fork(watchLoadPost)]);\n}","map":{"version":3,"sources":["/Users/seokmanjung/Desktop/Inflearn/react-nodebird/prepare/front/sagas/post.js"],"names":["all","fork","call","put","takeLatest","delay","axios","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","generateDummyPost","LOAD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","shortid","addPostAPI","data","post","addPost","action","id","generate","type","content","err","response","removePostAPI","removePost","addCommentAPI","postId","addComment","loadPostAPI","get","loadPost","watchAddPost","watchRemoveComment","watchAddComment","watchLoadPost","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, call, put, takeLatest, delay } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport {\n  ADD_COMMENT_FAILURE,\n  ADD_COMMENT_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  //\n  ADD_POST_FAILURE,\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  generateDummyPost,\n  LOAD_POST_FAILURE,\n  LOAD_POST_REQUEST,\n  LOAD_POST_SUCCESS,\n  //\n  REMOVE_POST_FAILURE,\n  REMOVE_POST_REQUEST,\n  REMOVE_POST_SUCCESS,\n} from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nimport shortid from \"shortid\";\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    //const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortid.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data,\n      },\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\n//\n\nfunction removePostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction* removePost(action) {\n  try {\n    //const result = yield call(removePostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data,\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\n//\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    //const result = yield call(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n//\n\nfunction loadPostAPI(data) {\n  return axios.get(\"/api/posts\", data);\n}\n\nfunction* loadPost(action) {\n  try {\n    //const result = yield call(loadPostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: generateDummyPost(10),\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\n////////////////////////////////////\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemoveComment() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\n/////////////////////////////////\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchAddPost),\n    fork(watchAddComment),\n    fork(watchRemoveComment),\n    fork(watchLoadPost),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}